// ============================================================================
// Firestore Security Rules - MindMelt Learning Platform
// New Structure: Courses, Topics, Users with Progress Tracking
// ============================================================================

rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    
    // Users collection - users can only access their own data
    match /users/{userId} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
      
      // Allow users to check if username exists (for signup validation)
      allow read: if request.auth != null && 
                  resource == null; // Only allow reading non-existent docs for validation
    }
    
    // Courses collection - public read access
    match /courses/{courseId} {
      allow read: if true; // Courses are public
      allow write: if false; // Only admin can modify courses
    }
    
    // Topics collection - public read access
    match /topics/{topicId} {
      allow read: if true; // Topics are public
      allow write: if false; // Only admin can modify topics
    }
    
    // Learning sessions - users can only access their own sessions
    match /sessions/{sessionId} {
      allow read, write: if request.auth != null && 
                        request.auth.uid == resource.data.userId;
      allow create: if request.auth != null && 
                   request.auth.uid == request.resource.data.userId;
    }
    
    // User progress tracking - users can only access their own progress
    match /user_progress/{userId} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
    }
    
    // Learning analytics (users can only access their own)
    match /analytics/{userId} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
    }
    
    // Daily summaries (users can only access their own)
    match /daily_summaries/{summaryId} {
      allow read, write: if request.auth != null && 
                        request.auth.uid == resource.data.userId;
      allow create: if request.auth != null && 
                   request.auth.uid == request.resource.data.userId;
    }
    
    // Admin-only collections
    match /admin/{document=**} {
      allow read, write: if request.auth != null && 
                        request.auth.token.admin == true;
    }
    
    // Deny all other access
    match /{document=**} {
      allow read, write: if false;
    }
  }
}

// ============================================================================
// New Database Structure:
// 
// Collections:
// 1. users/{userId}
//    - username: string
//    - email: string
//    - joinedAt: timestamp
//    - currentProgress: {
//        courseId: {
//          percentage: number,
//          topics: {
//            topicId: {
//              percentage: number,
//              completed: boolean,
//              lastUpdated: timestamp
//            }
//          }
//        }
//      }
//
// 2. courses/{courseId}
//    - name: string
//    - description: string
//    - category: string
//    - difficulty: string
//    - duration: string
//    - totalTopics: number
//    - color: string
//    - gradient: string
//    - createdAt: timestamp
//
// 3. topics/{topicId}  // topicId format: courseId_topic_N
//    - name: string
//    - description: string
//    - difficulty: string
//    - duration: string
//    - order: number
//    - courseId: string
//    - createdAt: timestamp
//
// 4. sessions/{sessionId} (existing)
// 5. user_progress/{userId} (for detailed progress tracking)
// 6. analytics/{userId} (existing)
// 7. daily_summaries/{summaryId} (existing)
// ============================================================================

// How to deploy these rules:
// 1. Install Firebase CLI: npm install -g firebase-tools
// 2. Login: firebase login
// 3. Init: firebase init firestore
// 4. Copy these rules to firestore.rules
// 5. Deploy: firebase deploy --only firestore:rules
